The Facade Pattern is a structural design pattern that provides a simplified, unified interface to a complex subsystem or group of classes.

It acts as a single entry point for clients to interact with the system, hiding the underlying complexity and making the system easier to use.


If we see the example we have taken,client is clicking on book movie ticket, then in the backend
The facade is taking care of all the services like payment , reserving seat, sending notification ,
generating ticket and loyality addPoints
we cannot give all of these options separately to the user , so we create a facade to all of them under one service call.


-----we need to use interface for better coding in future ,just to understand we call classes over there--------


Think of Manual vs. Automatic Car:
Complex Subsystem (Manual Car): Driving a manual car requires intricate knowledge of multiple components (clutch, gear shifter, accelerator) and their precise coordination to shift gears and drive. It's complex and requires the driver to manage many interactions.
Facade (Automatic Car): An automatic car acts as a facade. It provides a simplified interface (e.g., "Drive," "Reverse," "Park") to the complex underlying mechanics of gear shifting. The driver (client) no longer needs to manually coordinate the clutch and gears; the automatic transmission handles these complexities internally, making driving much easier.

In short, the manual car exposes the complexity, while the automatic car (the facade) simplifies it for the user